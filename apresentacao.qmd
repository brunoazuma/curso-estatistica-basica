---
title: "Boas vindas ao mundo dos dados"
author: "Bruno Azuma Balzano"
lang: pt-br
format:
    revealjs:
        css: styles.css
        theme: simple
bibliography: references.bib
csl: https://www.zotero.org/styles/instituto-brasileiro-de-informacao-em-ciencia-e-tecnologia-abnt
---

```{python}
# Célula inicial: importação das bibliotecas utilizadas
from copy import copy
from graphviz import Digraph
from IPython.display import SVG, HTML
import pandas as pd
import plotly.express as px
```

# Tipos de dados
## Tipos de variáveis
```{python}
#| fig-cap: "Fonte: Adaptado de @bussab_estatistica_basica."
#| fig-cap-location: bottom

# Configuração do diagrama (alteração apenas na cor das arestas)
diagrama = Digraph(
    name='ClassificacaoVariavel',
    format='svg',
    graph_attr={
        'rankdir': 'LR',
        'bgcolor': 'transparent',
        'nodesep': '0.5',
        'outputorder': 'edgesfirst'
    },
    node_attr={
        'style': 'rounded,filled',
        'fillcolor': 'navy',
        'fontname': 'Helvetica',
        'fontsize': '12',
        'fontcolor': 'white',
        'shape': 'box',
        'color': 'navy',
        'margin': '0'
    },
    edge_attr={
        'color': 'navy',  # Alterado de '#444444' para 'navy'
        'arrowhead': 'none',
        'penwidth': '1.5',
        'headclip': 'false',
        'tailclip': 'false'
    }
)

# Estrutura hierárquica (inalterada)
diagrama.node('A', 'Variável')
diagrama.node('B', 'Qualitativa')
diagrama.node('C', 'Quantitativa')
diagrama.edges(['AB', 'AC'])
diagrama.node('D', 'Nominal')
diagrama.node('E', 'Ordinal')
diagrama.edges(['BD', 'BE'])
diagrama.node('F', 'Discreta')
diagrama.node('G', 'Contínua')
diagrama.edges(['CF', 'CG'])

# Renderize e envolva em uma div com a classe
svg_output = diagrama.pipe(format='svg').decode('utf-8')
HTML(f'<div style="text-align:center">{svg_output}</div>')
```

::: {.notes}
Apresentar a hierarquia entre os típos de variáveis.
:::

## Tipos de variáveis: exemplo

| Nome      | Idade | Cor/Raça      | Nota | Aproveitamento               |
|-----------|-------|---------------|------|------------------------------|
| Ana       | 20    | Branca        | 8.5  | Satisfatório                 |
| Carlos    | 22    | Preta         | 6.0  | Não Satisfatório             |
| Mariana   | 19    | Parda         | 9.7  | Plenamente Satisfatório      |
| Pedro     | 21    | Amarela       | 7.2  | Satisfatório                 |
| Juliana   | 23    | Preta         | 5.5  | Não Satisfatório             |
| Lucas     | 20    | Indígena      | 9.0  | Plenamente Satisfatório      |

::: {.notes}
Utilizar esse e os próximos slides para exemplificar os tipos apresentados.
:::

## Tipos de variáveis: Nominal

::: {.cor-destaque}

| Nome      | Idade | **Cor/Raça** | Nota | Aproveitamento               |
|-----------|-------|--------------|------|------------------------------|
| Ana       | 20    | Branca       | 8.5  | Satisfatório                 |
| Carlos    | 22    | Preta        | 6.0  | Não Satisfatório             |
| Mariana   | 19    | Parda        | 9.7  | Plenamente Satisfatório      |
| Pedro     | 21    | Amarela      | 7.2  | Satisfatório                 |
| Juliana   | 23    | Preta        | 5.5  | Não Satisfatório             |
| Lucas     | 20    | Indígena     | 9.0  | Plenamente Satisfatório      |

:::

## Tipos de variáveis: Ordinal

::: {.aproveitamento-destaque}

| Nome      | Idade | Cor/Raça   | Nota | **Aproveitamento**          |
|-----------|-------|------------|------|-----------------------------|
| Ana       | 20    | Branca     | 8.5  | Satisfatório                |
| Carlos    | 22    | Preta      | 6.0  | Não Satisfatório            |
| Mariana   | 19    | Parda      | 9.7  | Plenamente Satisfatório     |
| Pedro     | 21    | Amarela    | 7.2  | Satisfatório                |
| Juliana   | 23    | Preta      | 5.5  | Não Satisfatório            |
| Lucas     | 20    | Indígena   | 9.0  | Plenamente Satisfatório     |

:::

## Tipos de variáveis: Discreta

::: {.idade-destaque}

| Nome      | **Idade** | Cor/Raça   | Nota | Aproveitamento            |
|-----------|-----------|------------|------|---------------------------|
| Ana       | 20        | Branca     | 8.5  | Satisfatório              |
| Carlos    | 22        | Preta      | 6.0  | Não Satisfatório          |
| Mariana   | 19        | Parda      | 9.7  | Plenamente Satisfatório   |
| Pedro     | 21        | Amarela    | 7.2  | Satisfatório              |
| Juliana   | 23        | Preta      | 5.5  | Não Satisfatório          |
| Lucas     | 20        | Indígena   | 9.0  | Plenamente Satisfatório   |

:::

## Tipos de variáveis: Contínua

::: {.nota-destaque}

| Nome      | Idade | Cor/Raça   | **Nota** | Aproveitamento            |
|-----------|-------|------------|----------|---------------------------|
| Ana       | 20    | Branca     | 8.5      | Satisfatório              |
| Carlos    | 22    | Preta      | 6.0      | Não Satisfatório          |
| Mariana   | 19    | Parda      | 9.7      | Plenamente Satisfatório   |
| Pedro     | 21    | Amarela    | 7.2      | Satisfatório              |
| Juliana   | 23    | Preta      | 5.5      | Não Satisfatório          |
| Lucas     | 20    | Indígena   | 9.0      | Plenamente Satisfatório   |

:::

# Medidas resumo

## Medidas de centralidade: Moda, mediana e média

```{python}
# Carrega o CSV em um dataframe
df = pd.read_csv(r"C:\Users\855395\Git\curso-estatistica-basica\data\alunos.csv")

# Variáveis para configuração de fonte e cores
main_color = "#222"
main_family = "Source Sans Pro, Helvetica, sans-serif"
main_size = 32
heading2_size = int(main_size * 1.6)  # Ex: 51px (arredondado para o inteiro)
# Margem superior calculada a partir da fonte base (ex: 32 * 3.75 = 120)
margin_top = int(main_size * 3.75)

# Ordena os dados pela nota e cria uma coluna numérica única
df_sorted = df.sort_values("Nota").reset_index(drop=True)
df_sorted["Idx"] = df_sorted.index

# Cria o gráfico de barras usando o índice único no eixo x e "Nota" no eixo y,
# removendo o "Idx" do tooltip via hover_data
bar_cent = px.bar(df_sorted, x="Idx", y="Nota", title="Notas dos alunos", hover_data={'Idx': False})

bar_cent.update_layout(
    plot_bgcolor="#fff",
    paper_bgcolor="#fff",
    font=dict(
        family=main_family,
        size=main_size,
        color=main_color
    ),
    title_font=dict(
        family=main_family,
        size=heading2_size,
        color=main_color
    ),
    title_x=0.5,
    margin=dict(t=margin_top)
)

# Remove as marcações no eixo x e mantém a grade horizontal no eixo y
bar_cent.update_xaxes(showticklabels=False, title_text=None)
bar_cent.update_yaxes(showgrid=True, gridcolor="rgba(229,236,246,1)")

bar_cent.show()
```

::: {.notes}
Explicar que cada barra corresponde à nota de um aluno e que estão ordenadas para explicar mediana e moda.
:::

## Medidas de centralidade: Moda

```{python}
# ...existing code...
bar_cent3 = copy(bar_cent)

# Supondo que a moda é definida pelos valores das colunas nos índices 24 a 29,
# adicionamos uma linha entre os pontos (24, 8.5) e (29, 8.5)
bar_cent3.update_layout(
    shapes=[
        # Linha horizontal indicando a moda
        dict(
            type="line",
            x0=24,
            x1=29,
            y0=8.5,
            y1=8.5,
            line=dict(color="red", width=2)
        ),
        # Marcador vertical no início
        dict(
            type="line",
            x0=24,
            x1=24,
            y0=8.4,
            y1=8.6,
            line=dict(color="red", width=2)
        ),
        # Marcador vertical no fim
        dict(
            type="line",
            x0=29,
            x1=29,
            y0=8.4,
            y1=8.6,
            line=dict(color="red", width=2)
        )
    ]
)

# Adiciona uma anotação centralizada na linha para destacar a moda
bar_cent3.add_annotation(
    x=(24 + 29) / 2,
    y=8.5,
    text="Moda (6 x 8,0)",
    showarrow=False,
    font=dict(
        family="Arial",
        size=12,
        color="red"
    ),
    yshift=10
)

# ...existing code...
bar_cent3.show()
```

::: {.notes}
Explicar como a moda é identificada e qual pergunta ela responde.
:::

## Medidas de centralidade: Mediana

```{python}
bar_cent2 = copy(bar_cent)

# Adiciona anotações para os pontos com índice 24 e 25
val24 = df_sorted.loc[24, "Nota"]
val25 = df_sorted.loc[25, "Nota"]
bar_cent2.add_annotation(x=24, y=val24, text="25", showarrow=True, arrowhead=2)
bar_cent2.add_annotation(x=25, y=val25, text="26", showarrow=True, arrowhead=2)

bar_cent2.show()
```

::: {.notes}
Explicar como a mediana é calculada em séries de tamanhos ímpares ou pares.
Exemplificar uso da mediana como resposta.
:::

## Medidas de centralidade: Média

> a *média aritmética* [...] é a soma das observações dividida pelo número delas. ^[@bussab_estatistica_basica, p. 35.]

. . .

> A média aritmética simples [...] é a soma do total de valores de uma determinada variável (discreta ou contínua) dividida pelo número total de observações. ^[@favero_manual_analise, p. 38.]


::: {.notes}
A ideia aqui é mostrar que média é complicada de definir, mas simples de entender: é quase como uma festinha colaborativa, onde cada pessoa leva uma coisa, tudo é colocado em uma mesa e depois dividido por igual para cada pessoa.

Citar que a média é importante porque permite definir a variância. (depois retomar quando falar de regressão)
:::

## Medidas de dispersão: variância e desvio padrão

```{python}
# Calcula a média das notas
mean_nota = df["Nota"].mean()

# Cria o scatterplot: eixo x = índice do df, eixo y = "Nota"
fig_scatter = px.scatter(df, x=df.index, y="Nota", title="Notas dos Alunos com Média e Desvios")

# Adiciona uma linha horizontal representando a média em laranja
fig_scatter.add_shape(
    type="line",
    x0=df.index.min(),
    x1=df.index.max(),
    y0=mean_nota,
    y1=mean_nota,
    line=dict(color="orange", dash="dash", width=2)
)

# Adiciona anotação na linha da média em laranja
fig_scatter.add_annotation(
    x=(df.index.min() + df.index.max()) / 2,
    y=mean_nota,
    text="Média",
    showarrow=False,
    font=dict(color="orange", size=14),
    yshift=-10
)

# Seleciona um aluno com nota acima da média e outro com nota abaixo da média
above_idx = (df["Nota"] - mean_nota).idxmax()
below_idx = (df["Nota"] - mean_nota).idxmin()
nota_above = df.loc[above_idx, "Nota"]
nota_below = df.loc[below_idx, "Nota"]
dev_above = nota_above - mean_nota
dev_below = mean_nota - nota_below

# Para o aluno com nota acima da média: adiciona uma linha vertical para destacar o desvio
fig_scatter.add_shape(
    type="line",
    x0=above_idx,
    x1=above_idx,
    y0=mean_nota,
    y1=nota_above,
    line=dict(color="green", width=2)
)
# Anotação com o valor do desvio positivo
fig_scatter.add_annotation(
    x=above_idx,
    y=(nota_above + mean_nota) / 2,
    text=f"Desvio: +{dev_above:.2f}",
    showarrow=True,
    arrowhead=1,
    ax=40,
    ay=0,
    font=dict(color="green", size=12)
)

# Para o aluno com nota abaixo da média: adiciona uma linha vertical para destacar o desvio
fig_scatter.add_shape(
    type="line",
    x0=below_idx,
    x1=below_idx,
    y0=nota_below,
    y1=mean_nota,
    line=dict(color="red", width=2)
)
# Anotação com o valor do desvio negativo
fig_scatter.add_annotation(
    x=below_idx,
    y=(nota_below + mean_nota) / 2,
    text=f"Desvio: -{dev_below:.2f}",
    showarrow=True,
    arrowhead=1,
    ax=-40,
    ay=0,
    font=dict(color="red", size=12)
)

# Oculta o label e os ticks do eixo x
fig_scatter.update_xaxes(
    title_text=None,
    showticklabels=False,
    ticks=""
)

# Ajusta margin e configurações de fontes utilizadas nos gráficos anteriores
fig_scatter.update_layout(
    plot_bgcolor="#fff",
    paper_bgcolor="#fff",
    font=dict(
        family=main_family,
        size=main_size,
        color=main_color
    ),
    title_font=dict(
        family=main_family,
        size=heading2_size,
        color=main_color
    ),
    margin=dict(t=margin_top)
)

fig_scatter.show()
```

::: {.notes}
Explicar que:

- Os valores destacados indicam o desvio das observações com a média;

- Somar todos os valores resulta em 0 (por definição);

- Elevar os valores ao quadrado antes de calcular a média elimina o problema de soma 0;

- Calcular a raiz da variância retorna os valores à mesma medida da variável, sendo equivalente ao desvio médio.

:::

## Medidas de dispersão: variância e desvio padrão

$$ \text{Var}\left(X\right) = \frac{1}{n} \sum_{i=1}^{n} \left(x_i - \bar{x} \right)^2 $$

. . .

```{python}
from IPython.display import Markdown, display
# Cria uma string representando o somatório para o cálculo da variância
mean_nota = df["Nota"].mean()
variance_sum_str_init = " + ".join(
    [f"({nota} - {mean_nota:.2f})²" for nota in df["Nota"][:2]])
variance_sum_str_final = " + ".join(
    [f"({nota} - {mean_nota:.2f})²" for nota in df["Nota"][-2:-1]])
Markdown(r'$$ \frac{1}{' + str(df.shape[0]) +
         r'}\left[{' + variance_sum_str_init + ' + ... + ' + variance_sum_str_final + r'}\right] = $$')
```

. . .

```{python}
Markdown('$$' + str(df['Nota'].var()) + '$$')
```

::: {.notes}
Explicar que:

- Elevar os valores ao quadrado antes de calcular a média elimina o problema de soma 0;

:::


## Medidas gerais de posição: quantis
## Função de densidade de probabilidade e quantis
## Boxplot em detalhes

## Gráficos qualitativos: Barras

```{python}

# Agrega a contagem por 'Aproveitamento'
df_counts = df.groupby('Aproveitamento').size().reset_index(name='Número de alunos')

# Define a ordem desejada para as categorias
order = ['Não Satisfatório', 'Satisfatório', 'Plenamente Satisfatório']
df_counts['Aproveitamento'] = pd.Categorical(df_counts['Aproveitamento'], categories=order, ordered=True)
df_counts = df_counts.sort_values('Aproveitamento')

# Cria e exibe o gráfico de barras
fig = px.bar(df_counts, x='Aproveitamento', y='Número de alunos',
             title='Número de alunos por Aproveitamento',
             category_orders={'Aproveitamento': order})

fig.update_layout(
    plot_bgcolor="#fff",
    paper_bgcolor="#fff",
    font=dict(
        family=main_family,
        size=main_size,
        color=main_color
    ),
    title_font=dict(
        family=main_family,
        size=heading2_size,
        color=main_color
    ),
    title_x=0.5,          # Centraliza o título do gráfico
    margin=dict(t=margin_top)
)
fig.update_xaxes(
    title_text=None,  # Remove o título do eixo x
    tickfont=dict(
        family=main_family,
        size=main_size,
        color=main_color
    )
)
fig.update_yaxes(
    title_text=None,  # Remove o título do eixo y
    tickfont=dict(
        family=main_family,
        size=main_size,
        color=main_color
    ),
    showgrid=True,
    gridcolor="rgba(229,236,246,1)"
)
fig.show()
```

## Gráficos qualitativos: Pizza

```{python}
# Cria e exibe o gráfico de pizza utilizando os mesmos dados agregados (df_counts)
pie_fig = px.pie(df_counts, names='Aproveitamento', values='Número de alunos',
                 title='Distribuição de Aproveitamento')
pie_fig.update_traces(textposition='inside', textinfo='percent+label',
                      textfont=dict(color="white"))
pie_fig.update_layout(
    showlegend=False,
    plot_bgcolor="#fff",
    paper_bgcolor="#fff",
    font=dict(
        family=main_family,
        size=main_size,
        color=main_color
    ),
    title_font=dict(
        family=main_family,
        size=heading2_size,
        color=main_color
    ),
    title_x=0.5,          # Centraliza o título do gráfico de pizza
    margin=dict(t=margin_top)
)
pie_fig.show()
```

## Gráficos qualitativos: Ressalvas

```{python}
# Duplique o gráfico de pizza, removendo os textos dentro das fatias
resalvas_pie = px.pie(df_counts, names='Aproveitamento', values='Número de alunos',
                      title='Distribuição de Aproveitamento - Ressalvas')
resalvas_pie.update_traces(textposition='inside', textinfo='none')
resalvas_pie.update_layout(
    showlegend=False,
    plot_bgcolor="#fff",
    paper_bgcolor="#fff",
    font=dict(
        family=main_family,
        size=main_size,
        color=main_color
    ),
    title_font=dict(
        family=main_family,
        size=heading2_size,
        color=main_color
    ),
    title_x=0.5,
    margin=dict(t=margin_top)
)
resalvas_pie.show()
```

## Gráficos qualitativos: Mais ressalvas

```{python}
# Cria contagem de alunos por Nome
name_counts = df.groupby('Nome').size().reset_index(name='Contagem')

# Cria o gráfico de pizza com a contagem por Nome
name_pie = px.pie(name_counts, names='Nome', values='Contagem', title='Distribuição de Nomes')
name_pie.update_traces(textposition='inside', textinfo='percent+label', textfont=dict(color="white"))
name_pie.update_layout(
    showlegend=False,
    plot_bgcolor="#fff",
    paper_bgcolor="#fff",
    font=dict(
        family=main_family,
        size=main_size,
        color=main_color
    ),
    title_font=dict(
        family=main_family,
        size=heading2_size,
        color=main_color
    ),
    title_x=0.5,
    margin=dict(t=margin_top)
)
name_pie.show()
```

## Gráficos qualitativos: Mapa de árvore (treemap)

```{python}
# Agrupa os dados para o gráfico de bolhas: cada combinação de Nota e Cor/Raça
df_counts_2 = df.groupby(['Nota', 'Cor/Raça']).size().reset_index(name='Número de alunos')

# Converte o gráfico de pizza em um gráfico treemap utilizando os mesmos dados agregados (df_counts)
treemap_fig = px.treemap(df_counts_2,
                         path=['Cor/Raça'],
                         values='Número de alunos',
                         title='Distribuição de Cor/Raça')

# Exibe o percentual de cada área e troca todas as letras para a cor branca
treemap_fig.update_traces(
    textinfo="label+percent root",
    textfont=dict(color="white")
)

treemap_fig.update_layout(
    showlegend=False,
    plot_bgcolor="#fff",
    paper_bgcolor="#fff",
    font=dict(
        family=main_family,
        size=main_size,
        color="white"
    ),
    title_font=dict(
        family=main_family,
        size=heading2_size,
        color="black"
    ),
    title_x=0.5,
    margin=dict(t=margin_top)
)

treemap_fig.show()
```

## Gráficos quantitativos: pontos e linha

```{python}

# Cria o gráfico de bolhas, onde o tamanho de cada bolha representa o número de alunos
bubble_fig = px.scatter(df_counts_2, x='Cor/Raça', y='Nota',
                        size='Número de alunos', color='Cor/Raça',
                        title='Notas por Cor/Raça (Bubble Chart)',
                        size_max=60)
bubble_fig.update_layout(
    showlegend=False,
    plot_bgcolor="#fff",
    paper_bgcolor="#fff",
    font=dict(
        family=main_family,
        size=main_size,
        color=main_color
    ),
    title_font=dict(
        family=main_family,
        size=heading2_size,
        color=main_color
    ),
    title_x=0.5,
    margin=dict(t=margin_top)
)
bubble_fig.update_xaxes(
    tickfont=dict(
        family=main_family,
        size=main_size,
        color=main_color
    ),
)
bubble_fig.update_yaxes(
    tickfont=dict(
        family=main_family,
        size=main_size,
        color=main_color
    ),
    showgrid=True,
    gridcolor="rgba(229,236,246,1)"
)
bubble_fig.show()
```

## Gráficos quantitativos: histograma
## Gráficos quantitativos: boxplot

# Associação entre variáveis
## Qualitativas x qualitativas: frequência absoluta e relativa
## Qualitativa x quantitativa: pearson, spearman e boxplot
## Quantitativa x quantitativa: pearson, spearman e gráfico de dispersão
## Regressão linear e cuidados

# Tipos de dados quanto à forma
## Dados estruturados
## Dados não estruturados
## Dados semi-estruturados
## Vantagens e desvantagens