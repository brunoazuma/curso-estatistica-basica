---
title: "Boas vindas ao mundo dos dados"
author: "Bruno Azuma Balzano"
format:
    revealjs:
        css: styles.css
bibliography: references.bib
csl: https://www.zotero.org/styles/instituto-brasileiro-de-informacao-em-ciencia-e-tecnologia-abnt
---

```{python}
# Célula inicial: importação das bibliotecas utilizadas
from graphviz import Digraph
from IPython.display import SVG, HTML
import pandas as pd
import plotly.express as px
```

# Tipos de dados e apresentação
## Tipos de variáveis
```{python}
#| fig-cap: "Fonte: Adaptado de @bussab_estatistica_basica."
#| fig-cap-location: bottom

# Configuração do diagrama (alteração apenas na cor das arestas)
diagrama = Digraph(
    name='ClassificacaoVariavel',
    format='svg',
    graph_attr={
        'rankdir': 'LR',
        'bgcolor': 'transparent',
        'nodesep': '0.5',
        'outputorder': 'edgesfirst'
    },
    node_attr={
        'style': 'rounded,filled',
        'fillcolor': 'navy',
        'fontname': 'Helvetica',
        'fontsize': '12',
        'fontcolor': 'white',
        'shape': 'box',
        'color': 'navy',
        'margin': '0'
    },
    edge_attr={
        'color': 'navy',  # Alterado de '#444444' para 'navy'
        'arrowhead': 'none',
        'penwidth': '1.5',
        'headclip': 'false',
        'tailclip': 'false'
    }
)

# Estrutura hierárquica (inalterada)
diagrama.node('A', 'Variável')
diagrama.node('B', 'Qualitativa')
diagrama.node('C', 'Quantitativa')
diagrama.edges(['AB', 'AC'])
diagrama.node('D', 'Nominal')
diagrama.node('E', 'Ordinal')
diagrama.edges(['BD', 'BE'])
diagrama.node('F', 'Discreta')
diagrama.node('G', 'Contínua')
diagrama.edges(['CF', 'CG'])

# Renderize e envolva em uma div com a classe
svg_output = diagrama.pipe(format='svg').decode('utf-8')
HTML(f'<div style="text-align:center">{svg_output}</div>')
```
<!-- ::: {.legenda-pequena}
**Fonte:** Adaptado de Bussab, Estatística Básica [@bussab_estatistica_basica].
::: -->

## Tipos de variáveis: exemplo

| Nome      | Idade | Cor/Raça      | Nota | Aproveitamento               |
|-----------|-------|---------------|------|------------------------------|
| Ana       | 20    | Branca        | 8.5  | Satisfatório                 |
| Carlos    | 22    | Preta         | 6.0  | Não Satisfatório             |
| Mariana   | 19    | Parda         | 9.7  | Plenamente Satisfatório      |
| Pedro     | 21    | Amarela       | 7.2  | Satisfatório                 |
| Juliana   | 23    | Preta         | 5.5  | Não Satisfatório             |
| Lucas     | 20    | Indígena      | 9.0  | Plenamente Satisfatório      |

## Tipos de variáveis: Nominal
 
::: {.cor-destaque}

| Nome      | Idade | **Cor/Raça** | Nota | Aproveitamento               |
|-----------|-------|--------------|------|------------------------------|
| Ana       | 20    | Branca       | 8.5  | Satisfatório                 |
| Carlos    | 22    | Preta        | 6.0  | Não Satisfatório             |
| Mariana   | 19    | Parda        | 9.7  | Plenamente Satisfatório      |
| Pedro     | 21    | Amarela      | 7.2  | Satisfatório                 |
| Juliana   | 23    | Preta        | 5.5  | Não Satisfatório             |
| Lucas     | 20    | Indígena     | 9.0  | Plenamente Satisfatório      |

:::

## Tipos de variáveis: Ordinal
 
::: {.aproveitamento-destaque}

| Nome      | Idade | Cor/Raça   | Nota | **Aproveitamento**          |
|-----------|-------|------------|------|-----------------------------|
| Ana       | 20    | Branca     | 8.5  | Satisfatório                |
| Carlos    | 22    | Preta      | 6.0  | Não Satisfatório            |
| Mariana   | 19    | Parda      | 9.7  | Plenamente Satisfatório     |
| Pedro     | 21    | Amarela    | 7.2  | Satisfatório                |
| Juliana   | 23    | Preta      | 5.5  | Não Satisfatório            |
| Lucas     | 20    | Indígena   | 9.0  | Plenamente Satisfatório     |

:::

## Tipos de variáveis: Discreta
 
::: {.idade-destaque}

| Nome      | **Idade** | Cor/Raça   | Nota | Aproveitamento            |
|-----------|-----------|------------|------|---------------------------|
| Ana       | 20        | Branca     | 8.5  | Satisfatório              |
| Carlos    | 22        | Preta      | 6.0  | Não Satisfatório          |
| Mariana   | 19        | Parda      | 9.7  | Plenamente Satisfatório   |
| Pedro     | 21        | Amarela    | 7.2  | Satisfatório              |
| Juliana   | 23        | Preta      | 5.5  | Não Satisfatório          |
| Lucas     | 20        | Indígena   | 9.0  | Plenamente Satisfatório   |

:::

## Tipos de variáveis: Contínua
 
::: {.nota-destaque}

| Nome      | Idade | Cor/Raça   | **Nota** | Aproveitamento            |
|-----------|-------|------------|----------|---------------------------|
| Ana       | 20    | Branca     | 8.5      | Satisfatório              |
| Carlos    | 22    | Preta      | 6.0      | Não Satisfatório          |
| Mariana   | 19    | Parda      | 9.7      | Plenamente Satisfatório   |
| Pedro     | 21    | Amarela    | 7.2      | Satisfatório              |
| Juliana   | 23    | Preta      | 5.5      | Não Satisfatório          |
| Lucas     | 20    | Indígena   | 9.0      | Plenamente Satisfatório   |

:::

## Gráficos qualitativos: Barras

```{python}
# Removido as importações duplicadas
# Carrega o CSV em um dataframe
df = pd.read_csv("data/alunos.csv")

# Agrega a contagem por 'Aproveitamento'
df_counts = df.groupby('Aproveitamento').size().reset_index(name='Número de alunos')

# Define a ordem desejada para as categorias
order = ['Não Satisfatório', 'Satisfatório', 'Plenamente Satisfatório']
df_counts['Aproveitamento'] = pd.Categorical(df_counts['Aproveitamento'], categories=order, ordered=True)
df_counts = df_counts.sort_values('Aproveitamento')

# Variáveis para configuração de fonte e cores
main_color = "#222"
main_family = "Source Sans Pro, Helvetica, sans-serif"
main_size = 32
heading2_size = int(main_size * 1.6)  # Ex: 51px (arredondado para o inteiro)
# Margem superior calculada a partir da fonte base (ex: 32 * 3.75 = 120)
margin_top = int(main_size * 3.75)

# Cria e exibe o gráfico de barras
fig = px.bar(df_counts, x='Aproveitamento', y='Número de alunos',
             title='Número de alunos por Aproveitamento',
             category_orders={'Aproveitamento': order})

fig.update_layout(
    plot_bgcolor="#fff",
    paper_bgcolor="#fff",
    font=dict(
        family=main_family,
        size=main_size,
        color=main_color
    ),
    title_font=dict(
        family=main_family,
        size=heading2_size,
        color=main_color
    ),
    title_x=0.5,          # Centraliza o título do gráfico
    margin=dict(t=margin_top)
)
fig.update_xaxes(
    title_text=None,  # Remove o título do eixo x
    tickfont=dict(
        family=main_family,
        size=main_size,
        color=main_color
    )
)
fig.update_yaxes(
    title_text=None,  # Remove o título do eixo y
    tickfont=dict(
        family=main_family,
        size=main_size,
        color=main_color
    ),
    showgrid=True,
    gridcolor="rgba(229,236,246,1)"
)
fig.show()
```

## Gráficos qualitativos: Pizza

```{python}
# Cria e exibe o gráfico de pizza utilizando os mesmos dados agregados (df_counts)
pie_fig = px.pie(df_counts, names='Aproveitamento', values='Número de alunos',
                 title='Distribuição de Aproveitamento')
pie_fig.update_traces(textposition='inside', textinfo='percent+label',
                      textfont=dict(color="white"))
pie_fig.update_layout(
    showlegend=False,
    plot_bgcolor="#fff",
    paper_bgcolor="#fff",
    font=dict(
        family=main_family,
        size=main_size,
        color=main_color
    ),
    title_font=dict(
        family=main_family,
        size=heading2_size,
        color=main_color
    ),
    title_x=0.5,          # Centraliza o título do gráfico de pizza
    margin=dict(t=margin_top)
)
pie_fig.show()
```

## Gráficos qualitativos: Ressalvas

```{python}
# Duplique o gráfico de pizza, removendo os textos dentro das fatias
resalvas_pie = px.pie(df_counts, names='Aproveitamento', values='Número de alunos',
                      title='Distribuição de Aproveitamento - Ressalvas')
resalvas_pie.update_traces(textposition='inside', textinfo='none')
resalvas_pie.update_layout(
    showlegend=False,
    plot_bgcolor="#fff",
    paper_bgcolor="#fff",
    font=dict(
        family=main_family,
        size=main_size,
        color=main_color
    ),
    title_font=dict(
        family=main_family,
        size=heading2_size,
        color=main_color
    ),
    title_x=0.5,
    margin=dict(t=margin_top)
)
resalvas_pie.show()
```

## Gráficos qualitativos: Mais ressalvas

```{python}
# Cria contagem de alunos por Nome
name_counts = df.groupby('Nome').size().reset_index(name='Contagem')

# Cria o gráfico de pizza com a contagem por Nome
name_pie = px.pie(name_counts, names='Nome', values='Contagem', title='Distribuição de Nomes')
name_pie.update_traces(textposition='inside', textinfo='percent+label', textfont=dict(color="white"))
name_pie.update_layout(
    showlegend=False,
    plot_bgcolor="#fff",
    paper_bgcolor="#fff",
    font=dict(
        family=main_family,
        size=main_size,
        color=main_color
    ),
    title_font=dict(
        family=main_family,
        size=heading2_size,
        color=main_color
    ),
    title_x=0.5,
    margin=dict(t=margin_top)
)
name_pie.show()
```

## Gráficos quantitativos: pontos e linha

```{python}
# Agrupa os dados para o gráfico de bolhas: cada combinação de Nota e Cor/Raça
bubble_df = df.groupby(['Nota', 'Cor/Raça']).size().reset_index(name='Count')

# Cria o gráfico de bolhas, onde o tamanho de cada bolha representa o número de alunos
bubble_fig = px.scatter(bubble_df, x='Cor/Raça', y='Nota',
                        size='Count', color='Cor/Raça',
                        title='Notas por Cor/Raça (Bubble Chart)',
                        size_max=60)
bubble_fig.update_layout(
    showlegend=False,
    plot_bgcolor="#fff",
    paper_bgcolor="#fff",
    font=dict(
        family=main_family,
        size=main_size,
        color=main_color
    ),
    title_font=dict(
        family=main_family,
        size=heading2_size,
        color=main_color
    ),
    title_x=0.5,
    margin=dict(t=margin_top)
)
bubble_fig.update_xaxes(
    tickfont=dict(
        family=main_family,
        size=main_size,
        color=main_color
    ),
)
bubble_fig.update_yaxes(
    tickfont=dict(
        family=main_family,
        size=main_size,
        color=main_color
    ),
    showgrid=True,
    gridcolor="rgba(229,236,246,1)"
)
bubble_fig.show()
```

## Gráficos quantitativos: histograma
## Gráficos quantitativos: boxplot

# Medidas resumo
## Medidas de centralidade: média, mediana e moda
## Medidas de dispersão: variância e desvio padrão
## Medidas gerais de posição: quantis
## Função de densidade de probabilidade e quantis
## Boxplot em detalhes

# Associação entre variáveis
## Qualitativas x qualitativas: frequência absoluta e relativa
## Qualitativa x quantitativa: pearson, spearman e boxplot
## Quantitativa x quantitativa: pearson, spearman e gráfico de dispersão
## Regressão linear e cuidados

# Tipos de dados quanto à forma
## Dados estruturados
## Dados não estruturados
## Dados semi-estruturados
## Vantagens e desvantagens
